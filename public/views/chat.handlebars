<div>
  <h1>Chat</h1>
  <div id="messages"></div>
</div>

<form id="form" action="">
  <input id="input" autocomplete="off" /><button>Send</button>
</form>

<template id="message-template">
  <div class="message">
    <div class="message-text"></div>
    <div class="message-timestamp"></div>

    <button class="delete">X</button>
  </div>
</template>

<style>
  #messages {
    display: flex;
    flex-direction: column;
    gap: 10px;
    height: 50vh;
    overflow-y: auto;
    scrollbar-gutter: stable;
    border: 1px solid #ccc;
    padding: 10px;
    margin-bottom: 10px;
  }

  .message {
    display: flex;
    gap: 10px;
    align-items: center;
    padding: 10px;
    border: 1px solid #ccc;
  }

  .message-text {
    font-weight: bold;
  }

  .message-timestamp {
    font-size: 0.8em;
    color: #666;
  }
</style>

<script>
  const form = document.getElementById('form');
  const input = document.getElementById('input');
  const messagesNode = document.getElementById('messages');

  const socket = new WebSocket('ws://localhost:3000');

  let isFirstMessage = true;

  const createMessageElement = message => {
    const messageElement = document.getElementById('message-template').content.cloneNode(true);
    messageElement.querySelector('.message').id = message.id;
    messageElement.querySelector('.message-text').textContent = message.text;
    messageElement.querySelector('.message-timestamp').textContent = new Date(message.timestamp).toLocaleString();
    messageElement.querySelector('.delete').onclick = () => {
      socket.send(JSON.stringify({
        type: 'delete',
        payload: { id: message.id }
      }));
    };

    return messageElement;
  };

  socket.onmessage = function(event) {
    const action = JSON.parse(event.data);

    if (isFirstMessage) {
      action.forEach(message => {
        messagesNode.appendChild(createMessageElement(message));
      });

      isFirstMessage = false;

      return;
    } else {
      if (action.type === 'create') {
        messagesNode.appendChild(createMessageElement(action.payload));
      } else if (action.type === 'delete') {
        const messageElement = document.getElementById(action.payload.id);

        if (!messageElement) return;

        messagesNode.removeChild(messageElement);
      }
    }

  };

  form.onsubmit = function(e) {
    e.preventDefault();

    if (!input.value) return;

    socket.send(JSON.stringify({
      type: 'create',
      payload: { text: input.value }
    }));
    input.value = '';
  };
</script>